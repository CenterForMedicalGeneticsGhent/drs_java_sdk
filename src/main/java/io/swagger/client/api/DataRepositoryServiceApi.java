/*
 * Data Repository Service
 *  GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: ict@cmgg.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccessURL;
import io.swagger.client.model.BasicResponse;
import io.swagger.client.model.DrsObject;
import io.swagger.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataRepositoryServiceApi {
    private ApiClient apiClient;

    public DataRepositoryServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataRepositoryServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteObjectGa4ghDrsV1ObjectsObjectIdDelete
     * @param objectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteCall(String objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ga4gh/drs/v1/objects/{object_id}"
            .replaceAll("\\{" + "object_id" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteValidateBeforeCall(String objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling deleteObjectGa4ghDrsV1ObjectsObjectIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteCall(objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a DrsObject
     * Delete a &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; index entry
     * @param objectId  (required)
     * @return BasicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BasicResponse deleteObjectGa4ghDrsV1ObjectsObjectIdDelete(String objectId) throws ApiException {
        ApiResponse<BasicResponse> resp = deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteWithHttpInfo(objectId);
        return resp.getData();
    }

    /**
     * Delete a DrsObject
     * Delete a &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; index entry
     * @param objectId  (required)
     * @return ApiResponse&lt;BasicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BasicResponse> deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteWithHttpInfo(String objectId) throws ApiException {
        com.squareup.okhttp.Call call = deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteValidateBeforeCall(objectId, null, null);
        Type localVarReturnType = new TypeToken<BasicResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a DrsObject (asynchronously)
     * Delete a &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; index entry
     * @param objectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteAsync(String objectId, final ApiCallback<BasicResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteObjectGa4ghDrsV1ObjectsObjectIdDeleteValidateBeforeCall(objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BasicResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectAliasGa4ghDrsV1ObjectsGet
     * @param alias The alias(ses) on which to query DrsObjects (regex compatible) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectAliasGa4ghDrsV1ObjectsGetCall(List<String> alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ga4gh/drs/v1/objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (alias != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "alias", alias));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectAliasGa4ghDrsV1ObjectsGetValidateBeforeCall(List<String> alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling getObjectAliasGa4ghDrsV1ObjectsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getObjectAliasGa4ghDrsV1ObjectsGetCall(alias, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query DrsObjects on alias
     * Returns all objects that correspond to the list of aliases passed through         the request. The query is regex compatible.
     * @param alias The alias(ses) on which to query DrsObjects (regex compatible) (required)
     * @return List&lt;DrsObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DrsObject> getObjectAliasGa4ghDrsV1ObjectsGet(List<String> alias) throws ApiException {
        ApiResponse<List<DrsObject>> resp = getObjectAliasGa4ghDrsV1ObjectsGetWithHttpInfo(alias);
        return resp.getData();
    }

    /**
     * Query DrsObjects on alias
     * Returns all objects that correspond to the list of aliases passed through         the request. The query is regex compatible.
     * @param alias The alias(ses) on which to query DrsObjects (regex compatible) (required)
     * @return ApiResponse&lt;List&lt;DrsObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DrsObject>> getObjectAliasGa4ghDrsV1ObjectsGetWithHttpInfo(List<String> alias) throws ApiException {
        com.squareup.okhttp.Call call = getObjectAliasGa4ghDrsV1ObjectsGetValidateBeforeCall(alias, null, null);
        Type localVarReturnType = new TypeToken<List<DrsObject>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query DrsObjects on alias (asynchronously)
     * Returns all objects that correspond to the list of aliases passed through         the request. The query is regex compatible.
     * @param alias The alias(ses) on which to query DrsObjects (regex compatible) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectAliasGa4ghDrsV1ObjectsGetAsync(List<String> alias, final ApiCallback<List<DrsObject>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectAliasGa4ghDrsV1ObjectsGetValidateBeforeCall(alias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DrsObject>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGet
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param accessId An &#x60;access_id&#x60; from the &#x60;access_methods&#x60; list of a &#x60;DrsObject&#x60; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetCall(String objectId, String accessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ga4gh/drs/v1/objects/{object_id}/access/{access_id}"
            .replaceAll("\\{" + "object_id" + "\\}", apiClient.escapeString(objectId.toString()))
            .replaceAll("\\{" + "access_id" + "\\}", apiClient.escapeString(accessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetValidateBeforeCall(String objectId, String accessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGet(Async)");
        }
        // verify the required parameter 'accessId' is set
        if (accessId == null) {
            throw new ApiException("Missing the required parameter 'accessId' when calling getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetCall(objectId, accessId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a URL for fetching bytes
     * Returns a URL that can be used to fetch the bytes of a &#x60;DrsObject&#x60;.                     This method only needs to be called when using an &#x60;AccessMethod&#x60; that contains an &#x60;access_id&#x60;                     (e.g., for servers that use signed URLs for fetching object bytes).
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param accessId An &#x60;access_id&#x60; from the &#x60;access_methods&#x60; list of a &#x60;DrsObject&#x60; (required)
     * @return AccessURL
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessURL getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGet(String objectId, String accessId) throws ApiException {
        ApiResponse<AccessURL> resp = getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetWithHttpInfo(objectId, accessId);
        return resp.getData();
    }

    /**
     * Get a URL for fetching bytes
     * Returns a URL that can be used to fetch the bytes of a &#x60;DrsObject&#x60;.                     This method only needs to be called when using an &#x60;AccessMethod&#x60; that contains an &#x60;access_id&#x60;                     (e.g., for servers that use signed URLs for fetching object bytes).
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param accessId An &#x60;access_id&#x60; from the &#x60;access_methods&#x60; list of a &#x60;DrsObject&#x60; (required)
     * @return ApiResponse&lt;AccessURL&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessURL> getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetWithHttpInfo(String objectId, String accessId) throws ApiException {
        com.squareup.okhttp.Call call = getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetValidateBeforeCall(objectId, accessId, null, null);
        Type localVarReturnType = new TypeToken<AccessURL>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a URL for fetching bytes (asynchronously)
     * Returns a URL that can be used to fetch the bytes of a &#x60;DrsObject&#x60;.                     This method only needs to be called when using an &#x60;AccessMethod&#x60; that contains an &#x60;access_id&#x60;                     (e.g., for servers that use signed URLs for fetching object bytes).
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param accessId An &#x60;access_id&#x60; from the &#x60;access_methods&#x60; list of a &#x60;DrsObject&#x60; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetAsync(String objectId, String accessId, final ApiCallback<AccessURL> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectGa4ghDrsV1ObjectsObjectIdAccessAccessIdGetValidateBeforeCall(objectId, accessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessURL>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getObjectGa4ghDrsV1ObjectsObjectIdGet
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param expand If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getObjectGa4ghDrsV1ObjectsObjectIdGetCall(String objectId, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ga4gh/drs/v1/objects/{object_id}"
            .replaceAll("\\{" + "object_id" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getObjectGa4ghDrsV1ObjectsObjectIdGetValidateBeforeCall(String objectId, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectGa4ghDrsV1ObjectsObjectIdGet(Async)");
        }
        // verify the required parameter 'expand' is set
        if (expand == null) {
            throw new ApiException("Missing the required parameter 'expand' when calling getObjectGa4ghDrsV1ObjectsObjectIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = getObjectGa4ghDrsV1ObjectsObjectIdGetCall(objectId, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a DrsObject
     * Returns object metadata, and a list of access methods that can be used to fetch object bytes.
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param expand If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored. (required)
     * @return DrsObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DrsObject getObjectGa4ghDrsV1ObjectsObjectIdGet(String objectId, Boolean expand) throws ApiException {
        ApiResponse<DrsObject> resp = getObjectGa4ghDrsV1ObjectsObjectIdGetWithHttpInfo(objectId, expand);
        return resp.getData();
    }

    /**
     * Retrieve a DrsObject
     * Returns object metadata, and a list of access methods that can be used to fetch object bytes.
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param expand If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored. (required)
     * @return ApiResponse&lt;DrsObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DrsObject> getObjectGa4ghDrsV1ObjectsObjectIdGetWithHttpInfo(String objectId, Boolean expand) throws ApiException {
        com.squareup.okhttp.Call call = getObjectGa4ghDrsV1ObjectsObjectIdGetValidateBeforeCall(objectId, expand, null, null);
        Type localVarReturnType = new TypeToken<DrsObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a DrsObject (asynchronously)
     * Returns object metadata, and a list of access methods that can be used to fetch object bytes.
     * @param objectId &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; identifier (required)
     * @param expand If false and the object_id refers to a bundle, then the ContentsObject array contains only         those objects directly contained in the bundle. That is, if the bundle contains other bundles,         those other bundles are not recursively included in the result. If true and the object_id refers to a bundle,         then the entire set of objects in the bundle is expanded. That is, if the bundle contains aother bundles,         then those other bundles are recursively expanded and included in the result.         Recursion continues through the entire sub-tree of the bundle.         If the object_id refers to a blob, then the query parameter is ignored. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getObjectGa4ghDrsV1ObjectsObjectIdGetAsync(String objectId, Boolean expand, final ApiCallback<DrsObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getObjectGa4ghDrsV1ObjectsObjectIdGetValidateBeforeCall(objectId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DrsObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postObjectGa4ghDrsV1ObjectsPost
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postObjectGa4ghDrsV1ObjectsPostCall(DrsObject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ga4gh/drs/v1/objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postObjectGa4ghDrsV1ObjectsPostValidateBeforeCall(DrsObject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postObjectGa4ghDrsV1ObjectsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = postObjectGa4ghDrsV1ObjectsPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new DrsObject
     * POST a requested ID to create an object that corresponds to this ID
     * @param body  (required)
     * @return BasicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BasicResponse postObjectGa4ghDrsV1ObjectsPost(DrsObject body) throws ApiException {
        ApiResponse<BasicResponse> resp = postObjectGa4ghDrsV1ObjectsPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new DrsObject
     * POST a requested ID to create an object that corresponds to this ID
     * @param body  (required)
     * @return ApiResponse&lt;BasicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BasicResponse> postObjectGa4ghDrsV1ObjectsPostWithHttpInfo(DrsObject body) throws ApiException {
        com.squareup.okhttp.Call call = postObjectGa4ghDrsV1ObjectsPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<BasicResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new DrsObject (asynchronously)
     * POST a requested ID to create an object that corresponds to this ID
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postObjectGa4ghDrsV1ObjectsPostAsync(DrsObject body, final ApiCallback<BasicResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postObjectGa4ghDrsV1ObjectsPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BasicResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putObjectGa4ghDrsV1ObjectsObjectIdPut
     * @param body  (required)
     * @param objectId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putObjectGa4ghDrsV1ObjectsObjectIdPutCall(DrsObject body, String objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ga4gh/drs/v1/objects/{object_id}"
            .replaceAll("\\{" + "object_id" + "\\}", apiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putObjectGa4ghDrsV1ObjectsObjectIdPutValidateBeforeCall(DrsObject body, String objectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putObjectGa4ghDrsV1ObjectsObjectIdPut(Async)");
        }
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling putObjectGa4ghDrsV1ObjectsObjectIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = putObjectGa4ghDrsV1ObjectsObjectIdPutCall(body, objectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a DrsObject
     * Update the &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;
     * @param body  (required)
     * @param objectId  (required)
     * @return BasicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BasicResponse putObjectGa4ghDrsV1ObjectsObjectIdPut(DrsObject body, String objectId) throws ApiException {
        ApiResponse<BasicResponse> resp = putObjectGa4ghDrsV1ObjectsObjectIdPutWithHttpInfo(body, objectId);
        return resp.getData();
    }

    /**
     * Update a DrsObject
     * Update the &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;
     * @param body  (required)
     * @param objectId  (required)
     * @return ApiResponse&lt;BasicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BasicResponse> putObjectGa4ghDrsV1ObjectsObjectIdPutWithHttpInfo(DrsObject body, String objectId) throws ApiException {
        com.squareup.okhttp.Call call = putObjectGa4ghDrsV1ObjectsObjectIdPutValidateBeforeCall(body, objectId, null, null);
        Type localVarReturnType = new TypeToken<BasicResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a DrsObject (asynchronously)
     * Update the &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;
     * @param body  (required)
     * @param objectId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putObjectGa4ghDrsV1ObjectsObjectIdPutAsync(DrsObject body, String objectId, final ApiCallback<BasicResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putObjectGa4ghDrsV1ObjectsObjectIdPutValidateBeforeCall(body, objectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BasicResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
