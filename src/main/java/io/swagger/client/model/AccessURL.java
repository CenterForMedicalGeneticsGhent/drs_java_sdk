/*
 * Data Repository Service
 *  GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: ict@cmgg.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * AccessURL
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-25T15:49:43.145836023+02:00[Europe/Brussels]")

public class AccessURL {
  @SerializedName("url")
  private String url = null;

  @SerializedName("headers")
  private List<String> headers = null;

  public AccessURL url(String url) {
    this.url = url;
    return this;
  }

   /**
   * A fully resolvable URL that can be used to fetch the actual object bytes.
   * @return url
  **/
  @Schema(required = true, description = "A fully resolvable URL that can be used to fetch the actual object bytes.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public AccessURL headers(List<String> headers) {
    this.headers = headers;
    return this;
  }

  public AccessURL addHeadersItem(String headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<String>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * An optional list of headers to include in the HTTP request to &#x60;&#x60;&#x60;url&#x60;&#x60;&#x60;.         These headers can be used to provide auth tokens required to fetch the object bytes.
   * @return headers
  **/
  @Schema(description = "An optional list of headers to include in the HTTP request to ```url```.         These headers can be used to provide auth tokens required to fetch the object bytes.")
  public List<String> getHeaders() {
    return headers;
  }

  public void setHeaders(List<String> headers) {
    this.headers = headers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessURL accessURL = (AccessURL) o;
    return Objects.equals(this.url, accessURL.url) &&
        Objects.equals(this.headers, accessURL.headers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, headers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessURL {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
