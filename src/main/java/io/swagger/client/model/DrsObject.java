/*
 * Data Repository Service
 *  GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: ict@cmgg.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * DrsObject
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-25T15:49:43.145836023+02:00[Europe/Brussels]")

public class DrsObject {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("self_uri")
  private String selfUri = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("created_time")
  private String createdTime = null;

  @SerializedName("updated_time")
  private String updatedTime = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("mime_type")
  private String mimeType = null;

  @SerializedName("checksums")
  private AllOfDrsObjectChecksums checksums = null;

  @SerializedName("access_methods")
  private AllOfDrsObjectAccessMethods accessMethods = null;

  @SerializedName("contents")
  private AllOfDrsObjectContents contents = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("aliases")
  private List<String> aliases = null;

  public DrsObject id(String id) {
    this.id = id;
    return this;
  }

   /**
   * An identifier unique to this &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;
   * @return id
  **/
  @Schema(required = true, description = "An identifier unique to this ```DrsObject```")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public DrsObject name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A string that can be used to name a &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;.         This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].         See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
   * @return name
  **/
  @Schema(description = "A string that can be used to name a ```DrsObject```.         This string is made up of uppercase and lowercase letters, decimal digits, hypen, period, and underscore [A-Za-z0-9.-_].         See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DrsObject selfUri(String selfUri) {
    this.selfUri = selfUri;
    return this;
  }

   /**
   * A drs:// hostname-based URI, as defined in the DRS documentation, that tells clients how to access this object.         The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.         For example, if you arrive at this DRS JSON by resolving a compact identifier-based DRS URI,         the &#x60;&#x60;&#x60;self_uri&#x60;&#x60;&#x60; presents you with a hostname and properly encoded DRS ID for use in subsequent &#x60;&#x60;&#x60;access&#x60;&#x60;&#x60; endpoint calls.
   * @return selfUri
  **/
  @Schema(required = true, description = "A drs:// hostname-based URI, as defined in the DRS documentation, that tells clients how to access this object.         The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.         For example, if you arrive at this DRS JSON by resolving a compact identifier-based DRS URI,         the ```self_uri``` presents you with a hostname and properly encoded DRS ID for use in subsequent ```access``` endpoint calls.")
  public String getSelfUri() {
    return selfUri;
  }

  public void setSelfUri(String selfUri) {
    this.selfUri = selfUri;
  }

  public DrsObject size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * For blobs, the blob size in bytes. For bundles, the cumulative size, in bytes, of items in the contents field.
   * @return size
  **/
  @Schema(required = true, description = "For blobs, the blob size in bytes. For bundles, the cumulative size, in bytes, of items in the contents field.")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public DrsObject createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Timestamp of content creation in RFC3339. (This is the creation time of the underlying content, not of the JSON object.)
   * @return createdTime
  **/
  @Schema(required = true, description = "Timestamp of content creation in RFC3339. (This is the creation time of the underlying content, not of the JSON object.)")
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }

  public DrsObject updatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * Timestamp of content update in RFC3339, identical to &#x60;&#x60;&#x60;created_time&#x60;&#x60;&#x60; in systems that do not support updates.         (This is the update time of the underlying content, not of the JSON object.)
   * @return updatedTime
  **/
  @Schema(description = "Timestamp of content update in RFC3339, identical to ```created_time``` in systems that do not support updates.         (This is the update time of the underlying content, not of the JSON object.)")
  public String getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(String updatedTime) {
    this.updatedTime = updatedTime;
  }

  public DrsObject version(String version) {
    this.version = version;
    return this;
  }

   /**
   * A string representing a version. (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
   * @return version
  **/
  @Schema(description = "A string representing a version. (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public DrsObject mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * A string providing the mime-type of the &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;.
   * @return mimeType
  **/
  @Schema(description = "A string providing the mime-type of the ```DrsObject```.")
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  public DrsObject checksums(AllOfDrsObjectChecksums checksums) {
    this.checksums = checksums;
    return this;
  }

   /**
   * The checksum of the &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;. At least one checksum must be provided.         For blobs, the checksum is computed over the bytes in the blob.         For bundles, the checksum is computed over a sorted concatenation of the checksums of its         top-level contained objects (not recursive, names not included).         The list of checksums is sorted alphabetically (hex-code) before concatenation         and a further checksum is performed on the concatenated checksum value.         For example, if a bundle contains blobs with the following checksums:         md5(blob1) &#x3D; 72794b6d md5(blob2) &#x3D; 5e089d29 Then the checksum of the bundle is:         md5( concat( sort( md5(blob1), md5(blob2) ) ) ) &#x3D; md5( concat( sort( 72794b6d, 5e089d29 ) ) ) &#x3D;         md5( concat( 5e089d29, 72794b6d ) ) &#x3D; md5( 5e089d2972794b6d ) &#x3D; f7a29a04
   * @return checksums
  **/
  @Schema(required = true, description = "The checksum of the ```DrsObject```. At least one checksum must be provided.         For blobs, the checksum is computed over the bytes in the blob.         For bundles, the checksum is computed over a sorted concatenation of the checksums of its         top-level contained objects (not recursive, names not included).         The list of checksums is sorted alphabetically (hex-code) before concatenation         and a further checksum is performed on the concatenated checksum value.         For example, if a bundle contains blobs with the following checksums:         md5(blob1) = 72794b6d md5(blob2) = 5e089d29 Then the checksum of the bundle is:         md5( concat( sort( md5(blob1), md5(blob2) ) ) ) = md5( concat( sort( 72794b6d, 5e089d29 ) ) ) =         md5( concat( 5e089d29, 72794b6d ) ) = md5( 5e089d2972794b6d ) = f7a29a04")
  public AllOfDrsObjectChecksums getChecksums() {
    return checksums;
  }

  public void setChecksums(AllOfDrsObjectChecksums checksums) {
    this.checksums = checksums;
  }

  public DrsObject accessMethods(AllOfDrsObjectAccessMethods accessMethods) {
    this.accessMethods = accessMethods;
    return this;
  }

   /**
   * The list of access methods that can be used to fetch the &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;. Required for single blobs; optional for bundles.
   * @return accessMethods
  **/
  @Schema(description = "The list of access methods that can be used to fetch the ```DrsObject```. Required for single blobs; optional for bundles.")
  public AllOfDrsObjectAccessMethods getAccessMethods() {
    return accessMethods;
  }

  public void setAccessMethods(AllOfDrsObjectAccessMethods accessMethods) {
    this.accessMethods = accessMethods;
  }

  public DrsObject contents(AllOfDrsObjectContents contents) {
    this.contents = contents;
    return this;
  }

   /**
   * If not set, this &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; is a single blob. If set, this &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; is a bundle containing         the listed &#x60;&#x60;&#x60;ContentsObject&#x60;&#x60;&#x60; s (some of which may be further nested).
   * @return contents
  **/
  @Schema(description = "If not set, this ```DrsObject``` is a single blob. If set, this ```DrsObject``` is a bundle containing         the listed ```ContentsObject``` s (some of which may be further nested).")
  public AllOfDrsObjectContents getContents() {
    return contents;
  }

  public void setContents(AllOfDrsObjectContents contents) {
    this.contents = contents;
  }

  public DrsObject description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A human readable description of the &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60;.
   * @return description
  **/
  @Schema(description = "A human readable description of the ```DrsObject```.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DrsObject aliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public DrsObject addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<String>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * A list of strings that can be used to find other metadata about this &#x60;&#x60;&#x60;DrsObject&#x60;&#x60;&#x60; from external metadata sources.         These aliases can be used to represent secondary accession numbers or external GUIDs.
   * @return aliases
  **/
  @Schema(description = "A list of strings that can be used to find other metadata about this ```DrsObject``` from external metadata sources.         These aliases can be used to represent secondary accession numbers or external GUIDs.")
  public List<String> getAliases() {
    return aliases;
  }

  public void setAliases(List<String> aliases) {
    this.aliases = aliases;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrsObject drsObject = (DrsObject) o;
    return Objects.equals(this.id, drsObject.id) &&
        Objects.equals(this.name, drsObject.name) &&
        Objects.equals(this.selfUri, drsObject.selfUri) &&
        Objects.equals(this.size, drsObject.size) &&
        Objects.equals(this.createdTime, drsObject.createdTime) &&
        Objects.equals(this.updatedTime, drsObject.updatedTime) &&
        Objects.equals(this.version, drsObject.version) &&
        Objects.equals(this.mimeType, drsObject.mimeType) &&
        Objects.equals(this.checksums, drsObject.checksums) &&
        Objects.equals(this.accessMethods, drsObject.accessMethods) &&
        Objects.equals(this.contents, drsObject.contents) &&
        Objects.equals(this.description, drsObject.description) &&
        Objects.equals(this.aliases, drsObject.aliases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, selfUri, size, createdTime, updatedTime, version, mimeType, checksums, accessMethods, contents, description, aliases);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrsObject {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    selfUri: ").append(toIndentedString(selfUri)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    checksums: ").append(toIndentedString(checksums)).append("\n");
    sb.append("    accessMethods: ").append(toIndentedString(accessMethods)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
