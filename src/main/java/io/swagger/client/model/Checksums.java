/*
 * Data Repository Service
 *  GET request:  - Fetch a DrsObject from the database by sending a unique ID through the request - Fetch an access url to the data which the object refers to - Fetch DrsObjects by doing a search on the aliases  POST request:  - Create a non-existing DrsObject in the database by giving an identifier  DELETE request:  - Delete a DrsObject from the database by unique identifier  PUT request:  - Update an existing DrsObject by unique identifier and the changes in the body 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: ict@cmgg.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Checksums
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-25T15:49:43.145836023+02:00[Europe/Brussels]")

public class Checksums {
  @SerializedName("checksum")
  private String checksum = null;

  @SerializedName("type")
  private String type = null;

  public Checksums checksum(String checksum) {
    this.checksum = checksum;
    return this;
  }

   /**
   * The hex-string encoded checksum for the data
   * @return checksum
  **/
  @Schema(required = true, description = "The hex-string encoded checksum for the data")
  public String getChecksum() {
    return checksum;
  }

  public void setChecksum(String checksum) {
    this.checksum = checksum;
  }

  public Checksums type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The digest method used to create the checksum. The         value (e.g. &#x60;&#x60;&#x60;sha-256&#x60;&#x60;&#x60;) SHOULD be listed as &#x60;&#x60;&#x60;Hash Name String&#x60;&#x60;&#x60; in the         https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg[IANA Named Information Hash Algorithm Registry].         Other values MAY be used, as long as implementors are aware of the issues         discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].         GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.         Until then, if implementors do choose such an algorithm (e.g. because it&#x27;s implemented by their storage provider),         they SHOULD use an existing standard &#x60;&#x60;&#x60;type&#x60;&#x60;&#x60; value such as &#x60;&#x60;&#x60;md5&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;etag&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;crc32c&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;trunc512&#x60;&#x60;&#x60;, or &#x60;&#x60;&#x60;sha1&#x60;&#x60;&#x60;.
   * @return type
  **/
  @Schema(required = true, description = "The digest method used to create the checksum. The         value (e.g. ```sha-256```) SHOULD be listed as ```Hash Name String``` in the         https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg[IANA Named Information Hash Algorithm Registry].         Other values MAY be used, as long as implementors are aware of the issues         discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].         GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.         Until then, if implementors do choose such an algorithm (e.g. because it's implemented by their storage provider),         they SHOULD use an existing standard ```type``` value such as ```md5```, ```etag```, ```crc32c```, ```trunc512```, or ```sha1```.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Checksums checksums = (Checksums) o;
    return Objects.equals(this.checksum, checksums.checksum) &&
        Objects.equals(this.type, checksums.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checksum, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Checksums {\n");
    
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
